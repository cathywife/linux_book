#用户名,必须和php-fpm的一样
user www-data;

#进程数,cpu有几核就设置几个,最高设置到8, 高于8性能不会再提升了,而且稳定性变得更低
worker_processes 8;

#2核是 01，四核是0001，8核是00000001，有多少个核，就有几位数，1表示该内核开启，0表示该内核关闭。
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;

#pid的路径
pid /run/nginx.pid;

#最大文件打开句柄数,linux 支持65535,ulimit -n 可以看到linux设置的数据.建议设置成65535.
worker_rlimit_nofile 65535;

#事件模块
events {
	#网络I/O模,epoll比较高效
	use epoll;
	
	#每个worker进程允许最大的同时连接数（Maxclient = work_processes *　worker_connections）
	worker_connections 65535;
}

#以守护进程执行,worker关闭后会自动重启, docker下只能off.
daemon on;


http {
	#off隐藏nginx的版本号
	server_tokens off;
	
	#文件扩展名与文件类型映射表,nginx自带有个mime.types文件
	include mime.types;
	
	#默认MIME-type
	default_type  application/octet-stream;

	#日志格式
	log_format full '$remote_addr - $remote_user [$time_local] '
			'"$request" $status $body_bytes_sent '
			'"$http_referer" "$http_user_agent" "$http_x_forwarded_for" $request_time';

	#编码
	charset	utf-8;

	#保存服务器名字的hash表
	server_names_hash_bucket_size 128;
	
	#nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取
	client_header_buffer_size 32k;
	
	#4”为个数，“128K”为大小，最大缓存量为4个64K；
	large_client_header_buffers 4 64k;
	
	#请求体最大大小.
	client_max_body_size 8m;

	#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，
	#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
	#注意：如果图片显示不正常把这个改成off。
	sendfile on;
	
	
	tcp_nopush     on;
	tcp_nodelay on;
	keepalive_timeout 60;

	open_file_cache max=65535 inactive=10s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 1;

	gzip on;
	gzip_min_length  1k;
	gzip_buffers     4 16k;
	gzip_http_version 1.0;
	gzip_comp_level 2;
	gzip_types       text/plain application/javascript text/css application/xml application/json;
	gzip_vary on;


	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}
